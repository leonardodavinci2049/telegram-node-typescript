import dotenv from "dotenv";
import express, { Request, Response } from "express";
import { Telegraf } from "telegraf";

dotenv.config();

const app = express();
app.use(express.json());

const { TEL_TOKEN, URL_NGROK, PORT } = process.env;

if (!TEL_TOKEN || !URL_NGROK) {
  throw new Error(
    "As variáveis TEL_TOKEN e URL_NGROK são obrigatórias no .env"
  );
}
const WEBHOOK_URL = `${URL_NGROK}/webhook/${TEL_TOKEN}`;
const WEBHOOK_END = `/webhook/${TEL_TOKEN}`;

console.log("WEBHOOK_URL >> ", WEBHOOK_URL);

// Initialize Telegram bot with Telegraf
const bot = new Telegraf(TEL_TOKEN);

// Handle text messages with Telegraf
bot.on("text", async (ctx) => {
  try {
    console.log("Mensagem recebida: ", ctx.message);

    const chatId = ctx.message.chat.id;
    const text = ctx.message.text;
    const name = ctx.message.from.first_name;

    await ctx.reply(`Olá ${name || "usuário"}, você disse: ${text}`);
  } catch (error) {
    console.error("Erro ao processar mensagem: ", error);
  }
});

app.get("/", (req: Request, res: Response) => {
  const payload = {
    name: "bot Telegram API",
    status: "online",
    version: "1.0.1",
    documentation: "/",
    timestamp: new Date().toISOString(),
    endpoints: {
      base: "/api",
      auth: "/api/telegram",
    },
  };

  return res.json(payload);
});

app.listen(Number(PORT) || 8080, async () => {
  console.log("Servidor rodando na porta", PORT || 8080);
  // Configure webhook with Telegraf
  app.use(await bot.createWebhook({ domain: URL_NGROK, path: WEBHOOK_END }));
});
